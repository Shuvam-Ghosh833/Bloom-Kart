npm i bcryptjs jsonwebtoken validator nodemailer cookie-parser body-parser

bcryptjs: A library to help you hash passwords.Password hashing turns your password 
        (or any other piece of data) into a short string of letters and/or numbers using an 
        encryption algorithm. If a website is hacked, password hashing helps prevent cybercriminals
        from getting access to your passwords.

jsonwebtoken:   JSON Web Token (JWT) is a compact, URL-safe means of representing
            claims to be transferred between two parties.  The claims in a JWT
            are encoded as a JSON object that is used as the payload of a JSON
            Web Signature (JWS) structure or as the plaintext of a JSON Web
            Encryption (JWE) structure, enabling the claims to be digitally
            signed or integrity protected with a Message Authentication Code
            (MAC) and/or encrypted.

validator:    This library validates and sanitizes strings only.

nodemailer:   Used to get emails or sms for OTP if Forgot password

cookie-parser:  The middleware will parse the Cookie header on the request and expose 
                the cookie data as the property req.cookies and, if a secret was provided,
                as the property req.signedCookies. These properties are name value pairs
                of the cookie name to cookie value.


ADMINS:

{
    "name": "Shuvam",
    "email": "shuvamghosh1234@gmail.com",
    "password": "passwordshuvam"
}

USERS: 

{
    "name": "Kamal",
    "email": "kamalghosh842@gmail.com",
    "password": "passwords1234kamal"
}

{
    "name": "Xeno D",
    "email": "xenocide833@gmail.com",  
    "password": "passwords1234xeno"      (New Reset Password:  "passwords1234xenocide")
}

{
    "name": "John Doe",
    "email": "Johndoe@gmail.com",
    "password": "passwords1234john"
}

{
    "name": "Testing",
    "email": "testingemail@gmail.com",
    "password": "passwords1234test"       (New Reset Password:  "passwords1234testing12")
}

FRONTEND

axios: To fetch data from backend

react-alert-template-basic: depreciated

react-helmet: This reusable React component will manage all of your changes to the document
                head.Helmet takes plain HTML tags and outputs plain HTML tags. It's dead   
                simple, and React beginner friendly.   
                In our website we use this to give different titles for each page

redux:  Redux is a predictable state container for JavaScript apps.
        It helps you write applications that behave consistently, run in different 
        environments (client, server, and native), and are easy to test. On top of that, 
        it provides a great developer experience, such as live code editing combined with
         a time traveling debugger.


react-redux:  It lets your React components read data from a Redux store, 
                and dispatch actions to the store to update state.

redux-thunk:   Thunk middleware for Redux. It allows writing functions with logic inside that 
                can interact with a Redux store's dispatch and getState methods.

redux-devtools-extension: depreciated

react-router-dom:   React Router enables "client side routing".Client side routing allows
                    your app to update the URL from a link click without making another 
                    request for another document from the server. Instead, your app can
                    immediately render some new UI and make data requests with fetch to 
                    update the page with new information.

overlay-navbar:       

react-material-ui-carousel